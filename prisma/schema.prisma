// Comprehensive Rochester Law CMS Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String      @id @default(cuid())
  email            String      @unique
  name             String?
  firstName        String?
  lastName         String?
  hashedPassword   String?
  role             UserRole    @default(USER)
  departmentId     String?
  department       Department? @relation(fields: [departmentId], references: [id])
  isActive         Boolean     @default(true)
  securityLevel    SecurityLevel @default(BASIC)
  mfaEnabled       Boolean     @default(false)
  lastLogin        DateTime?
  phoneNumber      String?
  jobTitle         String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth
  accounts Account[]
  sessions Session[]

  // Relations
  assignedCases        Case[] @relation("AssignedAttorney")
  paralegalCases       Case[] @relation("AssignedParalegal")
  createdCases         Case[] @relation("CreatedBy")
  notes                Note[]
  events               CaseEvent[]
  tasks                Task[]
  assignedTasks        Task[] @relation("AssignedTo")
  documentReviews      DocumentReview[]
  auditLogs            AuditLog[]
  createdDocuments     Document[] @relation("CreatedBy")
  notifications        Notification[]
  approvedDocuments    Document[] @relation("ApprovedDocuments")
  approvedMotionBriefs MotionBrief[] @relation("ApprovedMotionBriefs") 
  interAgencyRequests  InterAgencyRequest[] @relation("InterAgencyRequests")
  createdPersons       Person[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Department {
  id          String  @id @default(cuid())
  name        String
  code        String  @unique
  description String?
  isActive    Boolean @default(true)
  contactInfo String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users              User[]
  cases              Case[]
  interAgencyRequests InterAgencyRequest[]

  @@map("departments")
}

// Person/Entity Management - Core Foundation
model Person {
  id            String      @id @default(cuid())
  type          PersonType  @default(INDIVIDUAL)
  firstName     String?
  lastName      String?
  middleName    String?
  suffix        String?
  businessName  String?
  taxId         String?
  ssn           String?     // Encrypted
  dateOfBirth   DateTime?
  
  // Contact Information
  primaryEmail    String?
  secondaryEmail  String?
  primaryPhone    String?
  secondaryPhone  String?
  faxNumber       String?
  website         String?
  
  // Address Information
  addresses       Address[]
  
  // Professional Information
  occupation      String?
  employer        String?
  licenseNumber   String?
  barNumber       String?
  
  isActive        Boolean     @default(true)
  isConfidential  Boolean     @default(false)
  securityLevel   SecurityLevel @default(BASIC)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById String?
  createdBy   User?   @relation(fields: [createdById], references: [id])

  // Relations
  caseInvolvements CasePersonInvolvement[]
  notes           Note[]
  events          CaseEvent[]

  @@map("persons")
}

model Address {
  id          String      @id @default(cuid())
  type        AddressType @default(PRIMARY)
  street1     String
  street2     String?
  city        String
  state       String
  zipCode     String
  country     String      @default("USA")
  isActive    Boolean     @default(true)
  
  personId    String?
  person      Person?     @relation(fields: [personId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

// Enhanced Case Management
model Case {
  id                String      @id @default(cuid())
  caseNumber        String      @unique
  title             String
  description       String?
  status            CaseStatus  @default(OPEN)
  priority          Priority    @default(MEDIUM)
  caseType          CaseType    @default(GENERAL)
  subType           String?
  
  // Financial Information
  estimatedValue    Float?
  actualCost        Float?
  budgetAllocated   Float?
  billingRate       Float?
  
  // Dates
  dateOpened        DateTime    @default(now())
  dateClosed        DateTime?
  dueDate           DateTime?
  statuteOfLimitations DateTime?
  
  // Assignment
  assignedAttorneyId  String?
  assignedAttorney    User?     @relation("AssignedAttorney", fields: [assignedAttorneyId], references: [id])
  assignedParalegalId String?
  assignedParalegal   User?     @relation("AssignedParalegal", fields: [assignedParalegalId], references: [id])
  
  // Department
  clientDepartmentId  String?
  clientDepartment    Department? @relation(fields: [clientDepartmentId], references: [id])
  
  // Security
  confidentialityLevel SecurityLevel @default(BASIC)
  isSealed            Boolean   @default(false)
  
  // Tracking
  createdById       String?
  createdBy         User?     @relation("CreatedBy", fields: [createdById], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  personInvolvements  CasePersonInvolvement[]
  notes              Note[]
  events             CaseEvent[]
  documents          Document[]
  tasks              Task[]
  foilRequests       FoilRequest[]
  eDiscoveryItems    EDiscoveryItem[]
  physicalFiles      PhysicalFile[]
  interAgencyRequests InterAgencyRequest[]

  @@map("cases")
}

model CasePersonInvolvement {
  id              String            @id @default(cuid())
  caseId          String
  case            Case              @relation(fields: [caseId], references: [id], onDelete: Cascade)
  personId        String
  person          Person            @relation(fields: [personId], references: [id], onDelete: Cascade)
  role            InvolvementRole   @default(OTHER)
  description     String?
  isActive        Boolean           @default(true)
  dateStarted     DateTime          @default(now())
  dateEnded       DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([caseId, personId, role])
  @@map("case_person_involvements")
}

// Multi-user Notes System
model Note {
  id          String    @id @default(cuid())
  title       String?
  content     String
  type        NoteType  @default(GENERAL)
  isPrivate   Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  tags        String?   // JSON array stored as string
  
  // Relations
  caseId      String?
  case        Case?     @relation(fields: [caseId], references: [id])
  personId    String?
  person      Person?   @relation(fields: [personId], references: [id])
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  
  // Metadata
  isConfidential Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}

// Comprehensive Event Tracking
model CaseEvent {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        EventType   @default(GENERAL)
  status      EventStatus @default(SCHEDULED)
  
  // Date/Time Information
  startDate   DateTime
  endDate     DateTime?
  allDay      Boolean     @default(false)
  timezone    String      @default("America/New_York")
  
  // Location Information  
  location    String?
  address     String?
  room        String?
  isVirtual   Boolean     @default(false)
  virtualLink String?
  
  // Participants
  participantsList String?  // JSON array of participant info
  
  // Results/Outcome
  outcome     String?
  result      EventResult?
  followUpRequired Boolean @default(false)
  followUpNotes   String?
  
  // Relations
  caseId      String?
  case        Case?    @relation(fields: [caseId], references: [id])
  personId    String?
  person      Person?  @relation(fields: [personId], references: [id])
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  documents   Document[]
  
  @@map("case_events")
}

// Enhanced Document Management
model Document {
  id              String        @id @default(cuid())
  title           String
  description     String?
  fileName        String
  originalName    String
  filePath        String
  fileSize        Int
  mimeType        String
  checksum        String        // For integrity verification
  
  // Categorization
  category        DocumentCategory @default(GENERAL)
  subCategory     String?
  tags            String?       // JSON array
  
  // Versioning
  version         String        @default("1.0")
  parentDocumentId String?
  parentDocument  Document?     @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  childDocuments  Document[]    @relation("DocumentVersions")
  isCurrentVersion Boolean      @default(true)
  
  // Security
  confidentialityLevel SecurityLevel @default(BASIC)
  isRedacted      Boolean       @default(false)
  redactionNotes  String?
  
  // Template Information
  isTemplate      Boolean       @default(false)
  templateFields  String?       // JSON object of merge fields
  
  // Approval Workflow
  approvalStatus  ApprovalStatus @default(DRAFT)
  approvedById    String?
  approvedBy      User?         @relation("ApprovedDocuments", fields: [approvedById], references: [id])
  approvedAt      DateTime?
  
  // Relations
  caseId          String?
  case            Case?         @relation(fields: [caseId], references: [id])
  eventId         String?
  event           CaseEvent?    @relation(fields: [eventId], references: [id])
  createdById     String
  createdBy       User          @relation("CreatedBy", fields: [createdById], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reviews         DocumentReview[]
  eDiscoveryItems EDiscoveryItem[]

  @@map("documents")
}

model DocumentReview {
  id            String        @id @default(cuid())
  documentId    String
  document      Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  reviewerId    String
  reviewer      User          @relation(fields: [reviewerId], references: [id])
  
  status        ReviewStatus  @default(PENDING)
  comments      String?
  changes       String?       // JSON object of suggested changes
  priority      Priority      @default(MEDIUM)
  
  requestedAt   DateTime      @default(now())
  completedAt   DateTime?
  dueDate       DateTime?

  @@map("document_reviews")
}

// Task Management
model Task {
  id              String      @id @default(cuid())
  title           String
  description     String?
  status          TaskStatus  @default(NOT_STARTED)
  priority        Priority    @default(MEDIUM)
  type            TaskType    @default(GENERAL)
  
  // Time tracking
  estimatedHours  Float?
  actualHours     Float?
  startDate       DateTime?
  dueDate         DateTime?
  completedAt     DateTime?
  
  // Assignment
  assignedToId    String?
  assignedTo      User?       @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdById     String
  createdBy       User        @relation(fields: [createdById], references: [id])
  
  // Relations
  caseId          String?
  case            Case?       @relation(fields: [caseId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

// FOIL Request Management  
model FoilRequest {
  id              String        @id @default(cuid())
  requestNumber   String        @unique
  subject         String
  description     String
  
  // Requester Information
  requesterName   String
  requesterEmail  String
  requesterPhone  String?
  requesterAddress String?
  requesterType   RequesterType @default(INDIVIDUAL)
  
  // Processing Information
  status          FoilStatus    @default(RECEIVED)
  dateReceived    DateTime      @default(now())
  dateDue         DateTime      // 5 business days by law
  dateResponded   DateTime?
  responseMethod  String?
  
  // Legal Information
  exemptionsClaimed String?     // JSON array of exemptions
  feesRequired    Boolean       @default(false)
  feeAmount       Float?
  feesPaid        Boolean       @default(false)
  
  // Processing Notes
  processingNotes String?
  denialReason    String?
  
  // Relations
  caseId          String?
  case            Case?         @relation(fields: [caseId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("foil_requests")
}

// Physical File Tracking
model PhysicalFile {
  id              String            @id @default(cuid())
  fileNumber      String            @unique
  title           String
  description     String?
  
  // Location Tracking
  currentLocation String
  building        String?
  room            String?
  shelf           String?
  box             String?
  
  // Status
  status          PhysicalFileStatus @default(ACTIVE)
  isArchived      Boolean           @default(false)
  archiveDate     DateTime?
  archiveLocation String?
  
  // Tracking
  lastCheckout    DateTime?
  checkedOutBy    String?
  returnDueDate   DateTime?
  
  // Relations
  caseId          String?
  case            Case?             @relation(fields: [caseId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("physical_files")
}

// E-Discovery Management
model EDiscoveryItem {
  id              String              @id @default(cuid())
  title           String
  description     String?
  
  // Processing Information
  status          EDiscoveryStatus    @default(COLLECTED)
  custodian       String?
  sourceLocation  String?
  collectionDate  DateTime            @default(now())
  
  // File Information
  originalPath    String?
  preservedPath   String
  fileHash        String
  fileSize        Int
  mimeType        String
  
  // Legal Hold
  legalHoldId     String?
  isPrivileged    Boolean             @default(false)
  privilegeNotes  String?
  isRedacted      Boolean             @default(false)
  redactionLevel  String?
  
  // Relations
  caseId          String
  case            Case                @relation(fields: [caseId], references: [id])
  documentId      String?
  document        Document?           @relation(fields: [documentId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("e_discovery_items")
}

// Inter-Agency Communication
model InterAgencyRequest {
  id                String                    @id @default(cuid())
  requestNumber     String                    @unique
  subject           String
  description       String
  urgency           Priority                  @default(MEDIUM)
  
  // Requesting Department
  requestingDeptId  String
  requestingDept    Department                @relation(fields: [requestingDeptId], references: [id])
  requestorName     String
  requestorEmail    String
  requestorPhone    String?
  
  // Request Details
  requestType       InterAgencyRequestType    @default(LEGAL_ASSISTANCE)
  serviceRequested  String
  expectedOutcome   String?
  deadline          DateTime?
  
  // Status
  status            RequestStatus             @default(RECEIVED)
  assignedAttorneyId String?
  assignedAttorney  User?                     @relation("InterAgencyRequests", fields: [assignedAttorneyId], references: [id])
  
  // Response
  responseProvided  String?
  responseDate      DateTime?
  outcomeAchieved   String?
  
  // Relations
  caseId            String?
  case              Case?                     @relation(fields: [caseId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("inter_agency_requests")
}

// Motion and Brief Bank
model MotionBrief {
  id              String        @id @default(cuid())
  title           String
  description     String?
  category        String        // e.g., "Motion to Dismiss", "Summary Judgment"
  subCategory     String?
  
  // Content
  content         String        // Full text content for searching
  filePath        String?       // Path to actual document file
  
  // Metadata
  caseNumber      String?
  courtName       String?
  jurisdiction    String?
  dateCreated     DateTime      @default(now())
  authorName      String
  opponentType    String?       // Type of opponent/opposing party
  
  // Indexing
  keywords        String?       // Searchable keywords
  tags            String?       // JSON array of tags
  practiceArea    String?
  
  // Usage Tracking
  timesUsed       Int           @default(0)
  lastUsed        DateTime?
  
  // Approval
  isApproved      Boolean       @default(false)
  approvedById    String?
  approvedBy      User?         @relation("ApprovedMotionBriefs", fields: [approvedById], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("motion_briefs")
}

// Notifications and Alerts
model Notification {
  id              String             @id @default(cuid())
  title           String
  message         String
  type            NotificationType   @default(INFO)
  priority        Priority           @default(MEDIUM)
  
  // Targeting
  userId          String?
  user            User?              @relation(fields: [userId], references: [id])
  roleTargeted    UserRole?
  deptTargeted    String?
  
  // Status
  isRead          Boolean            @default(false)
  readAt          DateTime?
  
  // Scheduling
  scheduledFor    DateTime?
  expiresAt       DateTime?
  
  // Actions
  actionUrl       String?
  actionText      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Audit Logging
model AuditLog {
  id              String      @id @default(cuid())
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  
  // Action Details
  action          String      // CREATE, UPDATE, DELETE, VIEW, etc.
  resource        String      // Table/resource affected
  resourceId      String?     // ID of affected record
  
  // Change Details  
  oldValues       String?     // JSON of previous values
  newValues       String?     // JSON of new values
  fieldChanged    String?     // Specific field that changed
  
  // Context
  ipAddress       String?
  userAgent       String?
  sessionId       String?
  
  // Results
  success         Boolean     @default(true)
  errorMessage    String?
  
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  ATTORNEY
  PARALEGAL
  CLIENT_DEPT
  USER
}

enum SecurityLevel {
  BASIC
  CONFIDENTIAL
  SECRET
  TOP_SECRET
}

enum PersonType {
  INDIVIDUAL
  CORPORATION
  LLC
  PARTNERSHIP
  GOVERNMENT_ENTITY
  NON_PROFIT
  OTHER
}

enum AddressType {
  PRIMARY
  SECONDARY
  BUSINESS
  MAILING
  BILLING
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  CLOSED
  APPEALED
  SETTLED
  DISMISSED
}

enum CaseType {
  LITIGATION
  TRANSACTIONAL
  REGULATORY
  ADVISORY
  COMPLIANCE
  CONTRACT
  EMPLOYMENT
  ENVIRONMENTAL
  REAL_ESTATE
  GENERAL
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InvolvementRole {
  PLAINTIFF
  DEFENDANT
  WITNESS
  EXPERT_WITNESS
  ATTORNEY
  OPPOSING_COUNSEL
  JUDGE
  MEDIATOR
  CLIENT
  CONTACT
  OTHER
}

enum NoteType {
  GENERAL
  MEETING
  PHONE_CALL
  RESEARCH
  STRATEGY
  DISCOVERY
  COURT_FILING
  CLIENT_COMMUNICATION
  INTERNAL
}

enum EventType {
  HEARING
  DEPOSITION
  MEETING
  DEADLINE
  COURT_DATE
  MEDIATION
  ARBITRATION
  TRIAL
  CONFERENCE
  FILING_DEADLINE
  GENERAL
}

enum EventStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum EventResult {
  SUCCESSFUL
  UNSUCCESSFUL
  CONTINUED
  SETTLED
  DISMISSED
  PENDING
}

enum DocumentCategory {
  MOTION
  BRIEF
  CONTRACT
  CORRESPONDENCE
  DISCOVERY
  EVIDENCE
  RESEARCH
  PLEADING
  ORDER
  JUDGMENT
  SETTLEMENT
  FOIL_RESPONSE
  TEMPLATE
  GENERAL
}

enum ApprovalStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  REQUIRES_CHANGES
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskType {
  RESEARCH
  DRAFTING
  FILING
  DISCOVERY
  MEETING
  PHONE_CALL
  COURT_APPEARANCE
  CLIENT_COMMUNICATION
  ADMINISTRATIVE
  GENERAL
}

enum FoilStatus {
  RECEIVED
  UNDER_REVIEW
  PROCESSING
  COMPLETED
  DENIED
  PARTIALLY_GRANTED
  REFERRED
  WITHDRAWN
}

enum RequesterType {
  INDIVIDUAL
  MEDIA
  ATTORNEY
  BUSINESS
  NON_PROFIT
  GOVERNMENT
  OTHER
}

enum PhysicalFileStatus {
  ACTIVE
  CHECKED_OUT
  ARCHIVED
  DESTROYED
  LOST
}

enum EDiscoveryStatus {
  COLLECTED
  PROCESSED
  REVIEWED
  PRODUCED
  WITHHELD
}

enum InterAgencyRequestType {
  LEGAL_ASSISTANCE
  DOCUMENT_REVIEW
  POLICY_GUIDANCE
  TRAINING
  REPRESENTATION
  OTHER
}

enum RequestStatus {
  RECEIVED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  REMINDER
  DEADLINE
  ASSIGNMENT
}

